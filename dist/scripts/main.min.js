(function(){function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s}return e})()({1:[function(require,module,exports){
'use strict';

var _ajax_data = require('./modules/ajax_data.js');

var _menu = require('./modules/menu.js');

//IMPORT
document.addEventListener('DOMContentLoaded', function () {
    (0, _menu.menuEvents)();
    (0, _menu.menuWrapper)();
    (0, _menu.serviceMap)();
    (0, _ajax_data.loadData)('stDataContainer', './dist/partials/box-shadow.html');
});

},{"./modules/ajax_data.js":2,"./modules/menu.js":4}],2:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.loadData = undefined;

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; //IMPORT


var _generator = require('./generator.js');

//MODULE
var loadData = exports.loadData = function loadData(object, path) {

    if (!object || !path) {
        return 'Handled object / object ID or file path is invalid';
    }

    switch (typeof object === 'undefined' ? 'undefined' : _typeof(object)) {
        case 'object':
            break;
        case 'string':
            object = document.getElementById(object);
            break;
    }
    var xhttp = new XMLHttpRequest();
    xhttp.onreadystatechange = function () {
        if (this.readyState == 4 && this.status == 200) {
            object.innerHTML = "";
            object.insertAdjacentHTML('afterbegin', this.responseText);
            (0, _generator.inputHandle)();
            (0, _generator.codeHandle)();
        }
    };
    xhttp.open('GET', path, true);
    xhttp.send();
};

},{"./generator.js":3}],3:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
var inputHandle = exports.inputHandle = function inputHandle() {

    //value modified
    var myint = 'undefined';
    var valueModify = function valueModify(myinput, bttn, state, max, min) {
        bttn.addEventListener('mousedown', function () {
            myint = window.setInterval(function () {
                var val = parseInt(myinput.value);
                switch (state) {
                    case true:
                        if (val < max) {
                            val++;
                        }
                        break;
                    case false:
                        if (val > -min) {
                            val--;
                        }
                        break;
                }
                myinput.value = val;
                var evt = document.createEvent("HTMLEvents");
                evt.initEvent("change", false, true);
                myinput.dispatchEvent(evt);
            }, 50);
        });
        bttn.addEventListener('mouseup', function () {
            window.clearInterval(myint);
        });
    };

    //overall handle
    var conf = document.getElementsByClassName('stConf');
    for (var i = 0; i < conf.length; i++) {
        //non color
        if (!conf[i].classList.contains('colorConf') && !conf[i].classList.contains('selectConf')) {
            (function () {
                var cont = conf[i];
                var input = cont.getElementsByTagName('input')[0];
                var leftProg = cont.getElementsByTagName('progress')[0];
                var rightProg = cont.getElementsByTagName('progress')[1];
                var lessBttn = cont.getElementsByTagName('button')[0];
                var moreBttn = cont.getElementsByTagName('button')[1];

                valueModify(input, lessBttn, false, rightProg.getAttribute('max'), leftProg.getAttribute('max'));
                valueModify(input, moreBttn, true, rightProg.getAttribute('max'), leftProg.getAttribute('max'));

                input.addEventListener('change', function () {
                    var minval = leftProg.getAttribute('max');
                    var maxval = rightProg.getAttribute('max');
                    if (input.value > 0) {
                        leftProg.value = 0;
                        rightProg.value = Math.abs(input.value);
                    }
                    if (input.value < 0) {
                        rightProg.value = 0;
                        leftProg.value = Math.abs(input.value);
                    }
                });
            })();
        }
        //color
        if (conf[i].classList.contains('colorConf')) {}
        //select
        if (conf[i].classList.contains('selectConf')) {}
    }
};

var generateCode = exports.generateCode = function generateCode() {
    var pid = document.getElementsByClassName('stSection')[0].id;
    var allInputs = document.getElementsByTagName('input');
    var allSelect = document.getElementsByTagName('select');
    var ourTarget = document.getElementById('stTarget');
    var codeTarget = document.getElementById('codeTarget');
    var finalColor = void 0,
        additionalCode = void 0,
        finalCode = void 0,
        textCode = void 0;
    switch (pid) {
        case "stBox-Shadow":
            //shadow box
            finalColor = 'rgba(' + allInputs[4].value + ',' + allInputs[5].value / 100 + ')';
            finalCode = allInputs[0].value + 'px ' + allInputs[1].value + 'px ' + allInputs[2].value + 'px ' + allInputs[3].value + 'px ' + finalColor;
            ourTarget.style.boxShadow = finalCode;

            textCode = 'box-shadow: ' + finalCode + ';\n';
            textCode += '-moz-box-shadow: ' + finalCode + ';\n';
            textCode += '-webkit-box-shadow: ' + finalCode + ';\n';
            textCode += '-o-box-shadow: ' + finalCode + ';\n';
            textCode += '-ms-box-shadow: ' + finalCode + ';\n';

            codeTarget.textContent = textCode;
            break;
        case "stText-Shadow":
            //text shadow
            finalColor = 'rgba(' + allInputs[3].value + ',' + allInputs[4].value / 100 + ')';
            finalCode = allInputs[0].value + 'px ' + allInputs[1].value + 'px ' + allInputs[2].value + 'px ' + finalColor;
            ourTarget.style.textShadow = finalCode;

            textCode = 'text-shadow: ' + finalCode + ';\n';
            textCode += '-moz-text-shadow: ' + finalCode + ';\n';
            textCode += '-webkit-text-shadow: ' + finalCode + ';\n';
            textCode += '-o-text-shadow: ' + finalCode + ';\n';
            textCode += '-ms-text-shadow: ' + finalCode + ';\n';

            codeTarget.textContent = textCode;
            break;
        case 'stBorders':
            //borders
            finalColor = 'rgba(' + allInputs[2].value + ',' + allInputs[3].value / 100 + ')';
            finalCode = allInputs[0].value + 'px ' + allSelect[0].value + ' ' + finalColor;
            additionalCode = allInputs[1].value + 'px';
            ourTarget.style.border = finalCode;
            ourTarget.style.borderRadius = additionalCode;

            textCode = 'border: ' + finalCode + ';\n';
            textCode += 'border-radius: ' + additionalCode + ';\n';
            textCode += '-moz-border-radius: ' + additionalCode + ';\n';
            textCode += '-webkit-border-radius: ' + additionalCode + ';\n';
            textCode += '-o-border-radius: ' + additionalCode + ';\n';
            textCode += '-ms-border-radius: ' + additionalCode + ';\n';

            codeTarget.textContent = textCode;
            break;
        case 'stFilter':
            //filter
            finalCode = 'blur(' + allInputs[0].value + 'px) brightness(' + allInputs[1].value + '%) contrast(' + allInputs[2].value + '%) grayscale(' + allInputs[3].value + '%) hue-rotate(' + allInputs[4].value + 'deg) invert(' + allInputs[5].value + '%) opacity(' + allInputs[6].value + '%) saturate(' + allInputs[7].value + '%) sepia(' + allInputs[8].value + '%)';

            ourTarget.style.filter = finalCode;

            textCode = 'filter: ' + finalCode + ';\n';
            textCode += '-moz-filter: ' + finalCode + ';\n';
            textCode += '-webkit-filter: ' + finalCode + ';\n';
            textCode += '-o-filter: ' + finalCode + ';\n';
            textCode += '-ms-filter: ' + finalCode + ';\n';

            codeTarget.textContent = textCode;
            break;
        default:
            console.log("Invalid partial ID");
            break;
    }
};

var codeHandle = exports.codeHandle = function codeHandle() {

    var allInputs = document.getElementsByTagName('input');
    var allSelect = document.getElementsByTagName('select');

    for (var i = 0; i < allInputs.length; i++) {
        var valTab = [];
        allInputs[i].addEventListener('change', function () {
            generateCode();
        });
        generateCode();
    }

    for (var k = 0; k < allSelect.length; k++) {
        allSelect[k].addEventListener('change', function () {
            generateCode();
        });
        generateCode();
    }

    var textCode = document.getElementById('codeTarget');
    var copyBttn = document.getElementsByClassName('stCode')[0].getElementsByTagName('button')[0];
    copyBttn.addEventListener('click', function () {
        textCode.select();
        document.execCommand('copy');
        copyBttn.classList.add('bttnCopyInfo');
        setTimeout(function () {
            copyBttn.classList.remove('bttnCopyInfo');
        }, 2000);
    });
};

},{}],4:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.serviceMap = exports.menuWrapper = exports.menuEvents = undefined;

var _ajax_data = require('./ajax_data.js');

//MODULE
var menuEvents = exports.menuEvents = function menuEvents() {
    var menuBttns = document.getElementById('stMenu').getElementsByTagName('li');
    var loadCnt = document.getElementById('stDataContainer');

    var _loop = function _loop(i) {

        var destination = menuBttns[i].getElementsByTagName('a')[0].textContent;
        destination = 'dist/partials/' + destination.replace(' ', '-') + '.html';

        menuBttns[i].addEventListener('click', function () {
            var allBttns = document.getElementById('stMenu').getElementsByTagName('li');
            for (var k = 0; k < allBttns.length; k++) {
                allBttns[k].classList.remove('stMenu_active');
            }
            this.classList.add('stMenu_active');
            (0, _ajax_data.loadData)(loadCnt, destination);
        });
    };

    for (var i = 0; i < menuBttns.length; i++) {
        _loop(i);
    }
}; //IMPORT
var menuWrapper = exports.menuWrapper = function menuWrapper() {

    var menu = document.getElementById('stMenu');
    var my = menu.offsetTop;
    var state = false;
    var cont = document.getElementById('stDataContainer');
    window.addEventListener('scroll', function () {
        if (this.scrollY >= menu.offsetTop && state == false) {
            cont.style.paddingTop = menu.scrollHeight + 'px';
            menu.classList.add('wrappedMenu');
            state = true;
        }
        if (this.scrollY < my && state == true) {
            cont.style.paddingTop = "";
            menu.classList.remove('wrappedMenu');
            state = false;
        }
    });
};

var serviceMap = exports.serviceMap = function serviceMap() {
    var menu = document.getElementById('stMenu');
    var menuPoints = menu.getElementsByTagName('a');
    var map = document.getElementById('stServiceMap');
    for (var i = 0; i < menuPoints.length; i++) {
        map.innerHTML += '<li>' + menuPoints[i].textContent + '</li>';
        map.getElementsByTagName('li')[i].style.width = 100 / menuPoints.length + '%';
    }
    var newPoints = map.getElementsByTagName('li');

    var _loop2 = function _loop2(k) {
        newPoints[k].addEventListener('click', function () {
            var findLi = document.getElementById('stMenu').getElementsByTagName('li');
            for (var j = 0; j < findLi.length; j++) {
                if (findLi[j].getElementsByTagName('a')[0].textContent == newPoints[k].textContent) {
                    findLi[j].click();
                };
            }
        });
    };

    for (var k = 0; k < newPoints.length; k++) {
        _loop2(k);
    }
};

},{"./ajax_data.js":2}]},{},[1]);
